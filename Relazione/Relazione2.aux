\relax 
\@nameuse{bbl@beforestart}
\babel@aux{italian}{}
\babel@aux{italian}{}
\newlabel{Udine}{{}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {1}Alberi binari di ricerca semplici}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Introduzione}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}Alberi binari di ricerca di tipo AVL}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Introduzione}{3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces L'inserimento viene a costare quindi theta(n) a differenza di O(Logn) per gli AVL.}}{4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Alberi binari di ricerca di tipo Red-Black}{5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Introduzione}{5}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Algortimo per il calcolo dei tempi}{6}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Analisi algoritmo e grafici}{6}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces In questo caso il BST risulta essere veloce siccome gli elementi randomici sono generati uniformemente}}{7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces L'AVL ottiene sempre questo andamento, anche nel caso peggiore, in quanto l'altezza dell'albero risulta essere logaritmica}}{7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Grazie alla presenza dei colori e grazie alle operazioni di rotazione, questa struttura riesce ad essere la pi√π performante in quanto un singolo inserimento costa O(logn)}}{7}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Confronto finale tra le strutture}{8}\protected@file@percent }
